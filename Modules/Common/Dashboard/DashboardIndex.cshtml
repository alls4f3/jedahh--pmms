@using Kendo.Mvc.UI;
@model PMMS.Common.DashboardPageModel
@{
    /**/

    ViewData["Title"] = "Dashboard";
    ViewData["PageId"] = "Dashboard";
}

@section Head {
    @Html.StyleBundle("Pages/Dashboard")
    @Html.ScriptBundle("Pages/Dashboard")
}

@section ContentHeader {
    <h1>@LocalText.Get("Navigation.Dashboard")<small>@Html.Raw(Texts.Site.Dashboard.ContentDescription)</small></h1>
}


<script>
    function formatSales(value) {
        if (value == 0) {
            return 0;
        }
        else {
            // hundreds
            if (value <= 999) {
                return value;
            }
            // thousands
            else if (value >= 1000 && value <= 999999) {
                return "$" + (value / 1000) + ".00K";
            }
            // millions
            else if (value >= 1000000 && value <= 999999999) {
                return "$" + (value / 1000000) + ".00M";
            }
        }
    };

    function formatPerformersSales(value) {
        if (value == 0) {
            return 0;
        }
        else {
            // hundreds
            if (value <= 999) {
                return value;
            }
            // thousands
            else if (value >= 1000 && value <= 999999) {
                return "$" + (value / 1000) + "K";
            }
            // millions
            else if (value >= 1000000 && value <= 999999999) {
                return "$" + (value / 1000000) + "M";
            }
        }
    };

    function formatTooltip(value) {
        return "$" + kendo.toString(value, "#,##");
    };

    function categoryAxisLabelTemplate(value) {
        return value.split(" ").join("\n");
    };


    function setSalesPerformersBarsColor(point) {
        switch (point.index) {
            case 0: {
                return "#2185b4";
            };
            case 1: {
                return "#319fd2";
            };
            case 2: {
                return "#3eaee2";
            };
            case 3: {
                return "#89CFF0";
            };
            case 4: {
                return "#B0DFE5";
            };
        };
    };

    var prevItemValue;
    function itemColor(e) {
        var currentItemValue = e.dataItem;
        var currentLargerThenPrev = !prevItemValue || currentItemValue.Volume >= prevItemValue.Volume;
        if (currentItemValue.Volume) {
            prevItemValue = currentItemValue;
        }
        return currentLargerThenPrev ? '#B0DFE5' : '#2185b4';
    }

    $(window).on("resize", function () {
        setDonutChartLabelsPosition()
    });

    $(document).ready(function () {
        setDonutChartLabelsPosition()
    });

    function setDonutChartLabelsPosition() {
        //var donutChart = $("#donut-chart").data("kendoChart");
        //var donutSeries = donutChart.options.series;
        //if ($(window).width() <= 716) {
        //    donutSeries[0].labels.position = "center";
        //    donutChart.setOptions({
        //        series: donutSeries
        //    });
        //}
        //else {
        //    donutSeries[0].labels.position = "outsideEnd";
        //    donutChart.setOptions({
        //        series: donutSeries
        //    });
        //}
    }

</script>

<div class="demo-section wide">
    @(Html.Kendo().Chart< PMMS.Common.Pages.ProductCategoriesModel >()
        .Name("column-chart")
        .ChartArea(chartArea => chartArea
                .Background("transparent"))
        .Title("مؤشر البلديات والشوارع الرئيسية")
        .Legend(legend => legend
            .Position(ChartLegendPosition.Bottom)
            .Margin(0, 0, 0, 25)
            )
        .DataSource(ds => ds.Read(read => read.Action("SalesByProductCategory", "Dashboard")))
        .Series(series =>
        {
            series.Column(model => model.v3).Name("شوارع رئيسية").CategoryField("v1").Tooltip(tooltip => tooltip.Template("Vacant Land: #= formatTooltip(value) #")).Color("#2185b4");
            series.Column(model => model.v2).Name("شوارع فرعية").CategoryField("v1").Tooltip(tooltip => tooltip.Template("Residential Properties: #= formatTooltip(value) #")).Color("#319fd2");
            //series.Column(model => model.v4).Name("Commercial Properties").CategoryField("v1").Tooltip(tooltip => tooltip.Template("Commercial Properties: #= formatTooltip(value) #")).Color("#3eaee2");
        })
        .CategoryAxis(axis => axis
            .MajorGridLines(lines => lines.Visible(false))
            .AxisCrossingValue(0, 10)
            .Max(12)
        )
        .ValueAxis(axis => axis.Numeric()
            .Labels(labels => labels.Template("#= formatSales(value) #"))
            .MajorUnit(1000000)
            .Title("مساح العينة")
            .Line(line => line.Visible(false))
        )
        .ValueAxis(axis => axis.Numeric()
            .Name("axis")
            .Labels(labels => labels.Template("#= formatSales(value) #"))
            .Title("")
            .MajorUnit(2000000)
            .Line(line => line.Visible(false))
        )
        .Tooltip(tooltip => tooltip
            .Visible(true)
        ).Pannable(pannable => pannable
           .Lock(ChartAxisLock.Y)

        )
        .Zoomable(zoomable => zoomable
            .Mousewheel(mousewheel => mousewheel.Lock(ChartAxisLock.Y ))
            .Selection(selection => selection.Lock(ChartAxisLock.Y ))

        )

    )

    <div class="flex-container demo-section wide">
        @(Html.Kendo().Chart<PMMS.Common.Pages.FunnelSalesModel>()
            .Name("funnel-chart")
            .Title(t => t.Text("أجمالى مساحة  العينات").Position(ChartTitlePosition.Top))
            .ChartArea(chartArea => chartArea
                .Background("transparent"))
            .Series(
                srs => srs.Funnel("v2", "v1")
            .SegmentSpacing(1)
            )
            .DataSource(ds =>
            {
                ds.Read(read => read.Action("FunnelSales", "Dashboard"))
                .Sort(sort => sort.Add(model => model.v1).Ascending());
            })
            .SeriesColors("#166f99", "#2185b4", "#3eaee2", "#89CFF0", "#B0DFE5")
            .SeriesDefaults(sd =>
            {
                sd.Funnel().Labels(lbls =>
                {
                    lbls.Visible(true)
                        .Background("transparent")
                        .Color("white")
                        .Format("{0:0} متر مربع");
                })
                .DynamicSlope(false)
                .DynamicHeight(false);
            })
            .Legend(false)
            .Tooltip(tt => tt.Visible(true).Template("#= category #"))
        )
        @(Html.Kendo().Chart<PMMS.Common.Pages.RegionSalesModel >()
            .Name("donut-chart")
            .ChartArea(chartArea => chartArea
                .Background("transparent"))
                .Title(title => title
                    .Text("موشر عمليات المسح")
                    .Position(ChartTitlePosition.Top)
                    .Margin(0, 0, 25, 0)
            )
            .Legend(legend => legend.Visible(false))
            .SeriesDefaults(series => series.Donut().StartAngle(300))
            .DataSource(ds => ds
                .Read(read => read.Action("SalesByRegion", "Dashboard")))
            .Series(series =>
            {
                series.Donut("v2", "v1")
                    .Padding(40)
                    .Labels(labels => labels
                        .Visible(true)
                        .Position(ChartPieLabelsPosition.OutsideEnd)
                        .Template("#= category #: \n #= value#%")
                        .Background("transparent"));
            })
            .Tooltip(tooltip => tooltip
                .Visible(true)
                .Template("#= dataItem.Region #: #= value #%")
            )
            .SeriesColors("#166f99", "#2185b4", "#319fd2", "#3eaee2", "#89CFF0", "#B0DFE5")
        )
        @(Html.Kendo().Chart<PMMS.Common.Pages.SalesPerformersModel >()
            .Name("bar-chart")
            .ChartArea(chartArea => chartArea
                .Background("transparent"))
            .Title("نتائج عمليات المسح")
            .Legend(legend => legend
                .Visible(false).Background("red")
            )
            .DataSource(ds => ds.Read(read => read.Action("SalesPerformers", "Dashboard"))
            .Sort(sort => sort.Add(model => model.v2).Ascending()))
            .Series(series =>
            {
                series.Bar(model => model.v2).Name("Sales amount").CategoryField("v1").ColorHandler("setSalesPerformersBarsColor").Gap(1);
            })
            .CategoryAxis(axis => axis
                .MajorGridLines(lines => lines.Visible(false))
                .Labels(labels => labels.Template("#= categoryAxisLabelTemplate(data.value) #"))
            )
            .ValueAxis(axis => axis.Numeric()
                .Line(line => line.Visible(false))
                .MajorGridLines(lines => lines.Visible(false))
                .Labels(x => x.Template("#= formatPerformersSales(value) #"))
                .MajorUnit(20)
            )
            .Tooltip(tooltip => tooltip
                .Visible(true)
                .Template("#= formatTooltip(value) #")
            )
        )
    </div>

</div>

<style>
    .flex-container {
        display: flex;
        flex-wrap: wrap;
        margin: 40px 0 40px 0;
    }

    #funnel-chart {
        flex-grow:1;
    }

     #donut-chart {
        flex-basis: 45%;
        margin: 0 20px 0 20px;
        background: center no-repeat url('@Url.Content("~/Content/shared/styles/world-map.png")');
        background-size:contain;
    }

    #bar-chart {
        flex-grow:1;
    }

    @@media only screen and (max-width: 1815px) and (min-width: 1500px) {
      #donut-chart {
        flex-basis: 60%;
        }
    }
    @@media only screen and (max-width: 1500px) {
      #donut-chart {
        flex-basis: 100%;
        }
    }
</style>

